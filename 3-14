app.factory('service', function() {
	var students =  [{ name:"shashi", age:23, gender:"male",id:2  },
	                   { name:"ajay", age:24, gender:"female",id:3  }
    ];
	return {
		processing : function() {
			/*if (!input) {
				return input;
			}
			var out = "";

			for (var i = 0; i < input.length; i++) {
				if (i > 0 && input[i] === input[i].toUpperCase()) {
					out += " ";
				}
				out += input[i];

			}
			return out;*/
			return students;
		},
		
		getStudents : function(){
			return students;
		}

	}
}).factory('timestampMarker', function($q,$rootScope) {
	  return {
		    'request': function(config) {
		    	$rootScope.loading = true;
                config.requestTimestamp = new Date().getTime();
		      return config;
		    },

		   'requestError': function(rejection) {
			   alert("requestError");
			   $rootScope.loading = false;
			   rejection.config.responseTimestamp = new Date().getTime();
		      return $q.reject(rejection);
		    },



		    // optional method
		    'response': function(response) {
		    	$rootScope.loading = false;
                response.config.responseTimestamp = new Date().getTime();
                return response;
		    },

		    // optional method
		   'responseError': function(rejection) {
		      // do something on error
			   alert("responce error");
			   $rootScope.loading = false;
			   rejection.config.responseTimestamp = new Date().getTime();
		      return $q.reject(rejection);
		    }
	  }
		  });

app.config(['$httpProvider', function($httpProvider) {  
        $httpProvider.interceptors.push('timestampMarker');
    }]);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
.controller('dropdownsController', function($scope,$http) {
	$http({
		  method: 'GET',
		  url: '/url'
		}).then(function successCallback(response) {
			 var time = response.config.responseTimestamp - response.config.requestTimestamp;
			    console.log('The request took ' + (time / 1000) + ' seconds.');
			$scope.data = response.data.result;
			console.log($scope.data);
			
		  }, function errorCallback(response) {
			  $scope.data = [];
		  })
	$scope.message = "Courses";
	console.log($scope.first);
	console.log($scope.second);

	$scope.courses = [ "C#", "Java" ];
})


=-----------------------------------------------

<select ng-model="third">
<option value="">--select--</option>
<option ng-repeat="x in data | unique:'11'" ng-if="x.ISSUE_TYPE===first && x.11===second" value="{{x.11}}">{{x.11}}</option>
</select>{{third}}
----------------------------
.ui-widget-shadow {
	margin: -8px 0 0 -8px;
	padding: 8px;
	background: #333333 url(images/ui-bg_flat_0_333333_40x100.png) 50% 50% repeat-x;
	opacity: .1;
	filter: Alpha(Opacity=10);
	border-radius: 8px;
	
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

/* #modal-one,.modal-dialog-container{
	position:absolute;
	top:10%;
	width:100%;
} */
/* .modal-dialog .iconLoading{
	background: transparent url("images/loader_red_32X32.gif") no-repeat scroll 10% 8px;
    height: 41px;
    padding: 10px;
    width: 39px;
    top:10%;
	width:100%;
}
 */
#modal-one {
    background: transparent url("images/loader_red_32X32.gif") no-repeat scroll 10% 8px;
    height: 40px;
    position: absolute;
    right: 50%;
    top: 50%;
    width: 40px;
    z-index: 1000;
}
---------------------------
.factory('timestampMarker', function($q,$rootScope) {
	  return {
		    'request': function(config) {
		    	$rootScope.loading = true;
                config.requestTimestamp = new Date().getTime();
		      return config;
		    },

		   'requestError': function(rejection) {
			   alert("requestError");
			   $rootScope.loading = false;
			   rejection.config.responseTimestamp = new Date().getTime();
		      return $q.reject(rejection);
		    },



		    // optional method
		    'response': function(response) {
		    	$rootScope.loading = false;
                response.config.responseTimestamp = new Date().getTime();
                return response;
		    },

		    // optional method
		   'responseError': function(rejection) {
		      // do something on error
			   $rootScope.loading = false;
			   rejection.config.responseTimestamp = new Date().getTime();
		      return $q.reject(rejection);
		    }
	  }
		  });

app.config(['$httpProvider', function($httpProvider) {  
        $httpProvider.interceptors.push('timestampMarker');
    }]);
